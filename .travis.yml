env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "HAd+gE4PShve2kOks2l2MpknEAKMhUETNxOV63ytzvl2axymOlTospGDY3Of7VGuaRRoTSYvUOLzFP9/sEOg4P4O3CdETAlACYntLKkiaeXQ7D9D6oz4USsP5oSpfKA2bYA12pZe0FW7xqqy1ZIv0W9INlW49YwdgmUs+jte26M="
   # Coverity run condition (avoid matrix multiple runs), need customized
   # build script. Need an update if new matrix cases.
   - coverity_scan_run_condition='"$CC" = gcc -a "$TRAVIS_OS_NAME" != osx'
   # Coverity script test mode (if true no uploading, avoid reaching the quota)
   # usual processing: false.
   - coverity_scan_script_test_mode=false

os:
  - linux
  - osx

language: cpp

compiler:
  - gcc
  - clang

matrix:
  exclude:
    - os: osx
      compiler: gcc
  fast_finish: true

# Travis CI has 1.5 cores per VM, take advantage of it
# But first, the makefiles have to be fixed: all plugins are using the same .o's
#env:
#  - MAKEFLAGS="-j 2"

before_install:
  - date -u
  - uname -a
  - export J='-j3'

install:
  - git submodule update --init --recursive
  - if [ "$TRAVIS_OS_NAME" = osx' ]; then brew install devil; else sudo apt-get install libdevil-dev; fi

script:
  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];
    then
      echo "Don't build on coverty_scan branch.";
      exit 0;
    fi
  - ./autogen.sh
  - make $J

addons:
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    build_command_prepend: ./autogen.sh
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "make $J"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan
